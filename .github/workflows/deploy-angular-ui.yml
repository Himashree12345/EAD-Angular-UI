name: Build and Deploy

on: 
 repository_dispatch:
    types: [webhook-event]

env:
  webappname: WEB-TEC-SA-EAD-GITHUBACTIONS-DEV
  BUILD_BUILDID: ${{ github.run_number }}
jobs:
  Get_CR_Details:
    runs-on: ubuntu-latest
    steps:
    - name: Get CR Details
      run: |
        echo "Title: ${{ github.event.client_payload.title }}"
        echo "PlatformResource: ${{ github.event.client_payload.PlatformResource }}"
        echo "Environment: ${{ github.event.client_payload.environment }}"
 
     
     
  Upload_to_Blob:
     needs: Get_CR_Details
     runs-on: ubuntu-latest

     steps:
     - name: Install dependencies
       run: |
        python -m pip install requests
        pip install azure-storage-blob
        python -m pip install --upgrade pip
     - name: Upload to Blob
       run: |
           python -c "
           from azure.storage.blob import BlobServiceClient, BlobClient, ContainerClient
           from datetime import datetime
           import os
           import sys
   
           title = '${{ github.event.client_payload.title }}'
           PlatformResource = '${{ github.event.client_payload.PlatformResource }}'
           Environment = '${{ github.event.client_payload.environment }}'
          
           with open(os.path.join(os.getenv('GITHUB_WORKSPACE'), 'change_request_data.txt'), 'w') as f:
               f.write(title + '\n')
               f.write(PlatformResource + '\n')
               f.write(Environment + '\n')

           with open(os.path.join(os.getenv('GITHUB_WORKSPACE'), 'change_request_data.txt'), 'r') as f:
              number = f.readline().strip()
              u_platform_resources = f.readline().strip()
              u_environment_type = f.readline().strip()

           folder_name = datetime.now().strftime('%d-%m-%Y_%H%M%S')
           os.makedirs(folder_name, exist_ok=True)
           log_file = open(os.path.join(folder_name, 'task_log.txt'), 'w')
           sys.stdout = log_file
           sys.stderr = log_file  
   
           with open(os.path.join(folder_name, 'Get_ChangeRequest.txt'), 'w') as file:
               file.write(str(number) + '\n')
               file.write(f'Platform Resources: {u_platform_resources}\n')
               file.write(f'Platform Environment Type: {u_environment_type}\n')

           container_name = '${{ secrets.AZURECONTAINER }}'
           connection_string = '${{ secrets.CONNECTION_STRING }}'
           blob_service_client = BlobServiceClient.from_connection_string(connection_string)
    
           outer_folder_name = datetime.now().strftime('%d-%m-%Y')
    
           container_client = blob_service_client.get_container_client(container_name)
           blob_list = container_client.list_blobs(name_starts_with=outer_folder_name)
           inner_folder_count = len(set(blob.name.split('/')[1] for blob in blob_list if '/' in blob.name))
    
           inner_folder_name = outer_folder_name + '/BuildId:' + os.getenv('BUILD_BUILDID')
           blob_name = inner_folder_name + '/Get_ChangeRequest.txt'
           blob_client = blob_service_client.get_blob_client(container_name, blob_name)
    
           try:
                with open(os.path.join(folder_name, 'Get_ChangeRequest.txt'), 'rb') as data:
                    blob_client.upload_blob(data)
           except Exception as ex:
                print('Exception:')
                print(ex)
           "    
           
             
           
    
  build:
    needs: Upload_to_Blob
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
   
        
    - name: Update configs
      run: cp -r development.json ../src/assets/environments/development.json
      working-directory: EAD-Angular/configs

    - name: Use Node 18.x
      uses: actions/setup-node@v2
      with:
        node-version: '18'

    - name: npm install, build
      run: |
        npm install --force
        npm run build --prod
      working-directory: EAD-Angular
    
    # - name: List directory
    #   run: ls EAD-Angular
      
    - name: Archive artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: EAD-Angular/dist
  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:

    - name: Az CLI login
      uses: Azure/login@v2
      with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true
          
    - name: Download build
      uses: actions/download-artifact@v2
      with:
        name: dist
    - name: ls
      run: ls /home/runner/work/EAD-Angular-UI/EAD-Angular-UI
        
    - name: Azure App Service Deploy
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.webappname }}
        package: /home/runner/work/EAD-Angular-UI/EAD-Angular-UI/
        startup-command: pm2 serve /home/site/wwwroot/ead/browser --no-daemon --spa
   
  ado_workitem_closed:
      needs: build
      runs-on: ubuntu-latest
      steps:
        - name: Install dependencies
          run: |
           python -m pip install requests
           python -m pip install --upgrade pip
        - name: Upload to Blob
          run: |
              python -c "
              import requests
              import os
              import json
              import base64
              
              # Get environment variables
              workitem_api = '${{ secrets.WORKITEM_API }}'
              id = '${{ github.event.client_payload.workitemid }}'
              organization = '${{ secrets.ADO_ORG_URL }}'
              pat = os.getenv('servicecr')  # Replace with your PAT stored as a secret variable
              
              # Prepare the request
              headers = {
                  'Authorization': 'Basic ' + base64.b64encode(f':{pat}'.encode('ascii')).decode('ascii'),
                  'Content-Type': 'application/json-patch+json',
              }
              body = [
                  {
                      'op': 'add',
                      'path': '/fields/System.State',
                      'value': 'Done'
                  }
              ]
              url= f'{organization}/_apis/wit/workitems/{id}?api-version=6.0'
              
              # Send the request
              response = requests.patch(url, headers=headers, data=json.dumps(body))
              
              # Print the response
              print(response.json())                   
              "    
              
           
         
